// consul-cfg
//
// Commandline utility to convert config formats like TOML, JSON, YAML etc to KV Pairs which can be imported via consul cli.
// Output is same as JSON representation generated by the kv export command. Currently only toml is supported.
//
// ### Config to KV Pairs
// Export config file to Consul KV Pairs format which can be used for [Consul bulk import](https://www.consul.io/docs/commands/kv/import.html).

// ```bash
// # Read config from multiple files
// consul-cfg kv --type toml config1.toml config2.toml

// # Pipe stdin from other commands
// cat config.toml | consul-cfg kv --type toml

// # Specify prefix for all keys
// cat config.toml | consul-cfg kv --type toml --prefix myconfig/app
// ```

// ### Config to consul-template
// Convert config file to consul-template (go template). Config values replaced with consul-template [`keyOrUpdate`](https://github.com/hashicorp/consul-template#keyordefault) syntax with default value as current value.

// ```bash
// # Read config from multiple files
// consul-cfg tmpl --type toml config1.toml config2.toml

// # Pipe stdin from other commands
// cat config.toml | consul-cfg tmpl --type toml

// # Specify prefix for all keys
// cat config.toml | consul-cfg tmpl --type toml --prefix myconfig/app
// ```

package main

import (
	"log"
	"os"

	"github.com/spf13/cobra"
)

type consulKVPair struct {
	Key   string `json:"key"`
	Flags int    `json:"flags"`
	Value string `json:"value"`
}

var (
	kvInputType        string
	kvKeyPrefix        string
	kvAvailableFormats = []string{"toml", "yaml", "hcl", "json", "props"}

	tmplInputType        string
	tmplKeyPrefix        string
	tmplAvailableFormats = []string{"toml", "yaml", "hcl", "json", "props"}

	sysLog = log.New(os.Stdout, "", log.LUTC)
	errLog = log.New(os.Stderr, "", log.LUTC)
)

func main() {
	// Configure CLI
	var rootCmd = &cobra.Command{
		Use:   "consul-cfg [sub]",
		Short: "Commandline utils for managing app configs with Consul",
		Long:  `consul-cfg is a set of utilities for managing app configurations with Consul like generating config template for consul template and exporting app config as consul KV JSON pair config which can be used to bulk import key pairs to Consul.`,
		Args:  cobra.MinimumNArgs(0),
	}

	// Configure CLI
	var kvCmd = &cobra.Command{
		Use:   "kv [file...]",
		Short: "Commandline utility to convert any config format to consul KV pairs format.",
		Args:  cobra.MinimumNArgs(0),
		Run:   runKVCmd,
	}

	// Configure flags
	kvCmd.Flags().StringVarP(&kvInputType, "type", "t", "", "Input config format type. Available options are `toml`, `yaml`, `hcl`, `json` and `props` (JAVA properties)")
	kvCmd.Flags().StringVarP(&kvKeyPrefix, "prefix", "p", "", "Prefix for all keys")

	var tmplCmd = &cobra.Command{
		Use:   "tmpl [file...]",
		Short: "Commandline utility to convert any config format to consul template format.",
		Args:  cobra.MinimumNArgs(0),
		Run:   runTmplCmd,
	}

	// Configure flags
	tmplCmd.Flags().StringVarP(&tmplInputType, "type", "t", "", "Input config format type. Available options are `toml`, `yaml`, `hcl`, `json` and `props` (JAVA properties)")
	tmplCmd.Flags().StringVarP(&tmplKeyPrefix, "prefix", "p", "", "Prefix for all keys")

	// Add sub command to root
	rootCmd.AddCommand(kvCmd)
	rootCmd.AddCommand(tmplCmd)

	// Execute cli
	if err := rootCmd.Execute(); err != nil {
		errLog.Fatal(err)
	}
}
